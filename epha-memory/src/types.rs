use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MemoryFragment {
    pub id: i64,
    pub content: String,

    pub subjective_metadata: SubjectiveMetadata,
    pub objective_metadata: ObjectiveMetadata,

    pub associations: Vec<i64>,
}

/// ObjectiveMetadata representing the system's definitive record of a memory fragment.
/// Contains objective facts about the memory that are autonomously maintained by the system.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ObjectiveMetadata {
    /// Timestamp when the memory was created.
    pub created_at: i64,
    /// Source of the memory, indicating its origin (user input, system thought, etc.).
    pub source: MemorySource,
}

/// SubjectiveMetadata representing the AI system's subjective perception of a memory fragment
/// Contains the AI's subjective evaluation of memory importance, confidence, etc.
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct SubjectiveMetadata {
    /// Importance assessment of the memory, range 0-255, higher values indicate greater importance.
    pub importance: u8,
    /// Confidence assessment of the memory, range 0-255, higher values indicate stronger AI confidence.
    pub confidence: u8,
    /// Tags associated with the memory for categorization and retrieval.
    pub tags: Vec<String>,
    /// Free-form notes.
    pub notes: String, // TODO: Implement emotional weights for sentiment tracking
                       // pub emotional_weight: EmotionalWeights,
}

/// Represents the origin of a memory fragment.
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub enum MemorySource {
    /// Reflection indicates this memory was generated by it's own reflection.
    Reflection,
    /// Internet indicates this memory was sourced from internet content.
    Internet,
    /// Statement made by the AI itself during conversation.
    StatementBySelf,
    /// Statement made by another person during conversation (contains speaker information).
    StatementByOther(Speaker),

    #[default]
    Unknown,
}

/// Represents information about a speaker in a conversation.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Speaker {
    /// The identity the speaker claims to have (e.g., "John Doe", "System Admin").
    pub claimed_identity: String,

    /// The AI's assessment/judgment about the speaker's actual identity.
    /// This may differ from the claimed identity based on verification or context.
    pub assessed_identity: String,
}
